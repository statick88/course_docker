[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso de Docker",
    "section": "",
    "text": "Curso de Docker",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Curso de Docker</span>"
    ]
  },
  {
    "objectID": "index.html#qué-es-este-curso",
    "href": "index.html#qué-es-este-curso",
    "title": "Curso de Docker",
    "section": "¿Qué es este Curso?",
    "text": "¿Qué es este Curso?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Curso de Docker</span>"
    ]
  },
  {
    "objectID": "index.html#a-quién-está-dirigido",
    "href": "index.html#a-quién-está-dirigido",
    "title": "Curso de Docker",
    "section": "¿A quién está dirigido?",
    "text": "¿A quién está dirigido?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Curso de Docker</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Curso de Docker",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Curso de Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html",
    "href": "unidades/unidad0.html",
    "title": "Docker",
    "section": "",
    "text": "Ejemplos:",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html#ejemplos",
    "href": "unidades/unidad0.html#ejemplos",
    "title": "Docker",
    "section": "Comandos básicos de Docker:",
    "text": "Descargar una imagen:\ndocker pull docker/getting-started\n\n\n\nEste comando descarga la imagen getting-started desde el registro público de Docker.\nCorrer un contenedor en el puerto 80:\ndocker run -d -p 80:80 docker/getting-started\n\n\n\nEste comando ejecuta un contenedor desenlazado en segundo plano (-d) y mapea el puerto 80 de la máquina host al puerto 80 del contenedor (-p 80:80).\nDescargar una imagen desde un registro.\n\n\n\n\n\n\nTip\n\n\n\nEl comando -p se utiliza para mapear los puertos de la máquina host al contenedor, muchas personas consideran que significa “puerto”. Sin embargo en realidad significa “publicar” o “publicar puerto”.\n\n\n\nComandos básicos de Docker:\nDescargar una imagen desde un registro.\ndocker pull &lt;IMAGE_NAME:TAG&gt;\nListar las imágenes descargadas.\ndocker images\nListar contenedores en ejecución.\ndocker ps\nListar todos los contenedores, incluyendo los detenidos.\ndocker ps -a\nEjecutar un contenedor a partir de una imagen.\ndocker run -d -p &lt;HOST_PORT&gt;:&lt;CONTAINER_PORT&gt; &lt;IMAGE_NAME:TAG&gt;\nDetener un contenedor en ejecución.\ndocker stop &lt;CONTAINER_ID&gt;\nIniciar un contenedor detenio.\ndocker start &lt;CONTAINER_ID&gt;\nEliminar un contenedor.\ndocker rm &lt;CONTAINER_ID&gt;\nEliminar una imagen.\ndocker rmi &lt;IMAGE_NAME:TAG&gt;\n\n\nAtajos y Comandos Adicionales:\nEjecutar comandos dentro de un contenedor en ejecución.\ndocker exec -it &lt;CONTAINER_ID&gt; /bin/bash\nObtener detalles sobre un contenedor o imagen.\ndocker inspect &lt;CONTAINER_ID or IMAGE_NAME:TAG&gt;\nVer los logs de un contenedor.\ndocker logs &lt;CONTAINER_ID&gt;\nUtilizar Docker Compose para gestionar aplicaciones multi-contenedor.\ndocker-compose up -d\n\n\nPráctica:\n\nDescarga la imagen de Nginx desde el registro público.\nCrea y ejecuta un contenedor de Nginx en el puerto 8080.\nDetén y elimina el contenedor creado\nUtiliza los comandos para detener y eliminar un contenedor.\n\n\n\n\n\nResolución de la Actividad Práctica\n\n\nAbre tu terminal o línea de comandos.\nDescarga la imagen de Nginx desde el registro público de Docker:\n\ndocker pull nginx\n\nCrea y ejecuta un contenedor de Nginx en el puerto 8080:\n\ndocker run -d -p 8080:80 nginx\nElige un puerto en tu máquina local (por ejemplo, 8080) para mapearlo al puerto 80 del contenedor.\n\nVerifica que el contenedor esté en ejecución:\n\ndocker ps\n\nSi el contenedor está en ejecución, detenlo utilizando el siguiente comando:\n\ndocker stop &lt;CONTAINER_ID&gt;\nReemplaza  con el ID real del contenedor que obtuviste en el paso anterior.\n\nElimina el contenedor detenido:\n\ndocker rm &lt;CONTAINER_ID&gt;\nReemplaza  con el ID real del contenedor.\n\n\n\n\n\n\n\nTip\n\n\n\n\nCombina los comandos docker ps, docker stop, y docker rm para gestionar contenedores eficientemente.\n¡Practica estos pasos para familiarizarte con el ciclo de vida de los contenedores Docker!",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html#comandos-básicos-de-docker",
    "href": "unidades/unidad0.html#comandos-básicos-de-docker",
    "title": "Docker",
    "section": "",
    "text": "Descargar una imagen desde un registro.\ndocker pull &lt;IMAGE_NAME:TAG&gt;\nListar las imágenes descargadas.\ndocker images\nListar contenedores en ejecución.\ndocker ps\nListar todos los contenedores, incluyendo los detenidos.\ndocker ps -a\nEjecutar un contenedor a partir de una imagen.\ndocker run -d -p &lt;HOST_PORT&gt;:&lt;CONTAINER_PORT&gt; &lt;IMAGE_NAME:TAG&gt;\nDetener un contenedor en ejecución.\ndocker stop &lt;CONTAINER_ID&gt;\nIniciar un contenedor detenio.\ndocker start &lt;CONTAINER_ID&gt;\nEliminar un contenedor.\ndocker rm &lt;CONTAINER_ID&gt;\nEliminar una imagen.\ndocker rmi &lt;IMAGE_NAME:TAG&gt;",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html#atajos-y-comandos-adicionales",
    "href": "unidades/unidad0.html#atajos-y-comandos-adicionales",
    "title": "Docker",
    "section": "Atajos y Comandos Adicionales:",
    "text": "Atajos y Comandos Adicionales:\nEjecutar comandos dentro de un contenedor en ejecución.\ndocker exec -it &lt;CONTAINER_ID&gt; /bin/bash\nObtener detalles sobre un contenedor o imagen.\ndocker inspect &lt;CONTAINER_ID or IMAGE_NAME:TAG&gt;\nVer los logs de un contenedor.\ndocker logs &lt;CONTAINER_ID&gt;\nUtilizar Docker Compose para gestionar aplicaciones multi-contenedor.\ndocker-compose up -d",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html#práctica",
    "href": "unidades/unidad0.html#práctica",
    "title": "Docker",
    "section": "Práctica:",
    "text": "Práctica:\n\nDescarga la imagen de Nginx desde el registro público.\nCrea y ejecuta un contenedor de Nginx en el puerto 8080.\nDetén y elimina el contenedor creado\nUtiliza los comandos para detener y eliminar un contenedor.",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad0.html#qué-aprendimos",
    "href": "unidades/unidad0.html#qué-aprendimos",
    "title": "Docker",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\n\n\nAprendimos a descargar imágenes, correr contenedores y gestionarlos básicamente.\nEntendimos la importancia de las banderas en los comandos Docker.\nPracticamos la creación y gestión de contenedores Docker.",
    "crumbs": [
      "Unidad 1: Introducción a Docker",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2.html",
    "href": "unidades/unidad2.html",
    "title": "Dockerfile y Docker Compose",
    "section": "",
    "text": "Introducción\nDockerfile y Docker Compose son herramientas esenciales para la construcción y gestión de aplicaciones Docker. Un Dockerfile es un archivo de texto que define cómo se construirá una imagen Docker, mientras que Docker Compose es una herramienta para definir y gestionar aplicaciones Docker con múltiples contenedores. En esta lección, aprenderemos cómo usar Dockerfile y Docker Compose para personalizar imágenes Docker y orquestar servicios en un entorno multi-contenedor.\nA continuación veremos algunos conceptos básicos sobre Dockerfile y Docker Compose.",
    "crumbs": [
      "Unidad 2: Dockerfile y Docker Compose",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2.html#introducción",
    "href": "unidades/unidad2.html#introducción",
    "title": "Dockerfile y Docker Compose",
    "section": "",
    "text": "Dockerfile\nUn Dockerfile es un archivo de texto que contiene una serie de instrucciones para construir una imagen Docker. Estas instrucciones incluyen la configuración del sistema operativo base, la instalación de paquetes y dependencias, la configuración de variables de entorno y la definición de comandos para ejecutar la aplicación.\n\n\nDocker Compose\nDocker Compose es una herramienta para definir y gestionar aplicaciones Docker con múltiples contenedores. Permite definir servicios, redes y volúmenes en un archivo YAML y orquestar la ejecución de los contenedores en un entorno de desarrollo o producción.",
    "crumbs": [
      "Unidad 2: Dockerfile y Docker Compose",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2.html#ejemplos",
    "href": "unidades/unidad2.html#ejemplos",
    "title": "Dockerfile y Docker Compose",
    "section": "Ejemplos:",
    "text": "Ejemplos:\nEn este ejemplo vamos a dockerizar una aplicación nodejs con un servidor sencillo en express.\nEmpezamos por el código de nuestra aplicación:\nPara ello creamos un nuevo proyecto nodejs con el siguiente comando:\nnpm init -y\nInstalamos el paquete express con el siguiente comando:\nnpm install express\nCreamos los siguientes archivos:\n\nserver.js\npackage.json\nDockerfile\ndocker-compose.yml\n\n\nserver.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n\n\nDockerfile\n# Use the official Node.js 14 image\nFROM node:14\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the dependencies file to the working directory\nCOPY package.json .\n\n# Install dependencies\nRUN npm install\n\n# Copy the app code to the working directory\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 3000\n\n# Serve the app\nCMD [\"node\", \"server.js\"]\n\n\ndocker-compose.yml\nservices:\n  myapp:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\nEn este ejemplo, el Dockerfile define una imagen Docker para una aplicación Node.js. El archivo docker-compose.yml define un servicio llamado myapp que utiliza el Dockerfile.nodejs para construir la imagen y expone el puerto 3000 para acceder a la aplicación.\n\n\n\n\n\n\nTip\n\n\n\nEl puerto del lado izquierdo de los 2 puntos en el archivo docker-compose.yml es el puerto en el host, mientras que el puerto del lado derecho es el puerto en el contenedor.\n\n\nPara probar nuestro ejemplo, ejecutamos el siguiente comando:\ndocker-compose up -d\nEsto construirá la imagen Docker y ejecutará el contenedor en segundo plano. Podemos acceder a la aplicación en http://localhost:3000.\nPara verificar que el contenedor está en ejecución, ejecutamos el siguiente comando:\ndocker ps\nPodemos utilizar una aplicación como Thunder Client o Postman para enviar una solicitud HTTP a la aplicación y ver la respuesta.\nPara detener y eliminar el contenedor, ejecutamos el siguiente comando:\ndocker-compose down\n\n\n\n\n\n\nTip\n\n\n\nRecuerda: La imagen que se crea a partir del Dockerfile se almacena en el caché local de Docker. Si realizas cambios en el Dockerfile y deseas reconstruir la imagen, puedes usar el comando\ndocker-compose up --build",
    "crumbs": [
      "Unidad 2: Dockerfile y Docker Compose",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2.html#práctica",
    "href": "unidades/unidad2.html#práctica",
    "title": "Dockerfile y Docker Compose",
    "section": "Práctica:",
    "text": "Práctica:\n\nCrea un Dockerfile para una aplicación Python simple.\nConfigura un archivo docker-compose.yml para ejecutar la aplicación.\n\n\n\nResolución de la Actividad Práctica\n\nEjemplo de aplicación Python simple:\n# app.py\nprint(\"Hello, World!\")\nEjemplo de Dockerfile:\nFROM python:3.12\nWORKDIR /app\nCOPY . .\nCMD [\"python\", \"app.py\"]\nEjemplo de docker-compose.yml:\nservices:\n  myapp:\n    build:\n      context: .\n      dockerfile: Dockerfile.python\n    image: my-python-app",
    "crumbs": [
      "Unidad 2: Dockerfile y Docker Compose",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2.html#qué-aprendimos",
    "href": "unidades/unidad2.html#qué-aprendimos",
    "title": "Dockerfile y Docker Compose",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\n\nAprendimos a crear un Dockerfile para personalizar una imagen Docker.\nEntendimos cómo usar Docker Compose para orquestar servicios en un entorno multi-contenedor.\nPracticamos la configuración básica de un Dockerfile y un archivo docker-compose.yml.",
    "crumbs": [
      "Unidad 2: Dockerfile y Docker Compose",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dockerfile y Docker Compose</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html",
    "href": "unidades/unidad3.html",
    "title": "Servidores Docker",
    "section": "",
    "text": "MySQL\nPara instalar un servidor MySQL en Docker, podemos utilizar la imagen oficial de MySQL. or ejemplo, para instalar la versión 8.4.0, Para ello, ejecutamos el siguiente comando:\nPara conectarnos a la base de datos, podemos utilizar Workbench o cualquier otro cliente de MySQL. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#mysql",
    "href": "unidades/unidad3.html#mysql",
    "title": "Servidores Docker",
    "section": "",
    "text": "docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.4.0\n\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-mysql",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#postgresql",
    "href": "unidades/unidad3.html#postgresql",
    "title": "Servidores Docker",
    "section": "PostgreSQL",
    "text": "PostgreSQL\nPara instalar un servidor PostgreSQL en Docker, podemos utilizar la imagen oficial de PostgreSQL. Por ejemplo, para instalar la versión 13.4, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres:13.4\nPara conectarnos a la base de datos, podemos utilizar pgAdmin o cualquier otro cliente de PostgreSQL. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-postgres",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#mongodb",
    "href": "unidades/unidad3.html#mongodb",
    "title": "Servidores Docker",
    "section": "MongoDB",
    "text": "MongoDB\nPara instalar un servidor MongoDB en Docker, podemos utilizar la imagen oficial de MongoDB. Por ejemplo, para instalar la versión 5.0.2, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-mongo -d mongo:5.0.2\nPara conectarnos a la base de datos, podemos utilizar Compass o cualquier otro cliente de MongoDB. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-mongo",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#redis",
    "href": "unidades/unidad3.html#redis",
    "title": "Servidores Docker",
    "section": "Redis",
    "text": "Redis\nPara instalar un servidor Redis en Docker, podemos utilizar la imagen oficial de Redis. Por ejemplo, para instalar la versión 6.2.5, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-redis -d redis:6.2.5\nPara conectarnos a la base de datos, podemos utilizar Redis Desktop Manager o cualquier otro cliente de Redis. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-redis\nOtros servidores típicos que vamos a utilizar en el desarrollo de software son:\n\nApache\nNginx\nTomcat",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#apache",
    "href": "unidades/unidad3.html#apache",
    "title": "Servidores Docker",
    "section": "Apache",
    "text": "Apache\nPara instalar un servidor Apache en Docker, podemos utilizar la imagen oficial de Apache. Por ejemplo, para instalar la versión 2.4.48, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-apache -d httpd:2.4.48\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-apache",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#nginx",
    "href": "unidades/unidad3.html#nginx",
    "title": "Servidores Docker",
    "section": "Nginx",
    "text": "Nginx\nPara instalar un servidor Nginx en Docker, podemos utilizar la imagen oficial de Nginx. Por ejemplo, para instalar la versión 1.21.1, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-nginx -d nginx:1.21.1\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-nginx",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#tomcat",
    "href": "unidades/unidad3.html#tomcat",
    "title": "Servidores Docker",
    "section": "Tomcat",
    "text": "Tomcat\nPara instalar un servidor Tomcat en Docker, podemos utilizar la imagen oficial de Tomcat. Por ejemplo, para instalar la versión 9.0.52, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-tomcat -d tomcat:9.0.52\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-tomcat\nPor otra parte se ha vuelto muy popular el uso de frameworks tanto de backend como de frontend, vamos a aprender a realizar la instalación de algunos de ellos.",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#node.js",
    "href": "unidades/unidad3.html#node.js",
    "title": "Servidores Docker",
    "section": "Node.js",
    "text": "Node.js\nPara instalar un servidor Node.js en Docker, podemos utilizar la imagen oficial de Node.js. Por ejemplo, para instalar la versión 16.6.1, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-node -d node:16.6.1\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-node",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#react",
    "href": "unidades/unidad3.html#react",
    "title": "Servidores Docker",
    "section": "React",
    "text": "React\nPara instalar un servidor React en Docker, podemos utilizar la imagen oficial de React. Por ejemplo, para instalar la versión 17.0.2, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-react -d react:17.0.2\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-react",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#angular",
    "href": "unidades/unidad3.html#angular",
    "title": "Servidores Docker",
    "section": "Angular",
    "text": "Angular\nPara instalar un servidor Angular en Docker, podemos utilizar la imagen oficial de Angular. Por ejemplo, para instalar la versión 12.2.0, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-angular -d angular:12.2.0\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-angular\nDesde la parte de backend tambien son muy populares los frameworks de Boot Spring y Django, vamos a aprender a instalarlos en Docker.",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#spring-boot",
    "href": "unidades/unidad3.html#spring-boot",
    "title": "Servidores Docker",
    "section": "Spring Boot",
    "text": "Spring Boot\nPara instalar un servidor Spring Boot en Docker, podemos utilizar la imagen oficial de Spring Boot. Por ejemplo, para instalar la versión 2.5.4, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-spring -d spring:2.5.4\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-spring",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#django",
    "href": "unidades/unidad3.html#django",
    "title": "Servidores Docker",
    "section": "Django",
    "text": "Django\nPara instalar un servidor Django en Docker, podemos utilizar la imagen oficial de Django. Por ejemplo, para instalar la versión 3.2.6, Para ello, ejecutamos el siguiente comando:\ndocker run --name some-django -d django:3.2.6\nPara conectarnos al servidor, podemos utilizar un navegador web. Para ello, necesitamos conocer la IP del contenedor. Para ello, ejecutamos el siguiente comando:\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' some-django",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#conclusión",
    "href": "unidades/unidad3.html#conclusión",
    "title": "Servidores Docker",
    "section": "Conclusión",
    "text": "Conclusión\nEn esta unidad hemos aprendido a instalar distintos servidores de bases de datos y servidores web en Docker. En la siguiente unidad, vamos a aprender a crear nuestras propias imágenes de Docker.",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#creación-de-imágenes",
    "href": "unidades/unidad3.html#creación-de-imágenes",
    "title": "Servidores Docker",
    "section": "Creación de Imágenes",
    "text": "Creación de Imágenes\nPara crear una imagen de Docker, necesitamos un archivo Dockerfile. Un archivo Dockerfile es un archivo de texto que contiene una serie de instrucciones que Docker utilizará para crear una imagen. Por ejemplo, el siguiente archivo Dockerfile crea una imagen de Apache:\n# Use the official Apache image\n\nFROM httpd:2.4.48\n\n# Copy the configuration file\n\nCOPY ./httpd.conf /usr/local/apache2/conf/httpd.conf\n\n# Expose port 80\n\nEXPOSE 80\n\n# Start Apache\n\nCMD [\"httpd-foreground\"]\nPara crear una imagen de Docker a partir de un archivo Dockerfile, ejecutamos el siguiente comando:\ndocker build -t my-apache .",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#publicación-de-imágenes",
    "href": "unidades/unidad3.html#publicación-de-imágenes",
    "title": "Servidores Docker",
    "section": "Publicación de Imágenes",
    "text": "Publicación de Imágenes\nPara publicar una imagen de Docker en Docker Hub, necesitamos una cuenta en Docker Hub. Una vez que tenemos una cuenta en Docker Hub, podemos publicar una imagen de Docker utilizando el siguiente comando:\ndocker login\ndocker tag my-apache myusername/my-apache\ndocker push myusername/my-apache",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#descarga-de-imágenes",
    "href": "unidades/unidad3.html#descarga-de-imágenes",
    "title": "Servidores Docker",
    "section": "Descarga de Imágenes",
    "text": "Descarga de Imágenes\nPara descargar una imagen de Docker desde Docker Hub, ejecutamos el siguiente comando:\ndocker pull myusername/my-apache",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3.html#conclusión-1",
    "href": "unidades/unidad3.html#conclusión-1",
    "title": "Servidores Docker",
    "section": "Conclusión",
    "text": "Conclusión\nEn esta unidad hemos aprendido a crear nuestras propias imágenes de Docker y a publicarlas en Docker Hub. En la siguiente unidad, vamos a aprender a trabajar con contenedores en Docker.",
    "crumbs": [
      "Unidad 3: Servidores en Docker",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Servidores Docker</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios0.html",
    "href": "unidades/ejercicios0.html",
    "title": "Actividad Práctica",
    "section": "",
    "text": "Objetivo\nEl objetivo de esta actividad es familiarizarse con los comandos básicos de Docker y aprender a gestionar contenedores de manera eficiente.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios0.html#instrucciones",
    "href": "unidades/ejercicios0.html#instrucciones",
    "title": "Actividad Práctica",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nInicia un contenedor de la imagen “nginx” en segundo plano utilizando el comando docker run. Asegúrate de mapear el puerto 8080 del host al puerto 80 del contenedor.\nDetén y elimina el contenedor que acabas de crear utilizando los comandos Docker apropiados.\nCrea un nuevo contenedor con la imagen “alpine” y ejecuta un terminal interactivo dentro de él.\nDesde el contenedor alpine, instala el paquete curl utilizando el gestor de paquetes apk.\nCrea una imagen llamada “alpine-curl” a partir de este contenedor modificado.\n\nRecuerda que puedes consultar la documentación de Docker si necesitas ayuda con los comandos.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios0.html#entregables",
    "href": "unidades/ejercicios0.html#entregables",
    "title": "Actividad Práctica",
    "section": "Entregables:",
    "text": "Entregables:\n\nImagen Docker “alpine-curl” disponible localmente.\n\n\n\nResolución de la Actividad Práctica\n\n\nIniciar un contenedor Nginx:\n\ndocker run -d -p 8080:80 --name my-nginx nginx\nDetener y eliminar el contenedor Nginx:\ndocker stop my-nginx\ndocker rm my-nginx\nCrear un contenedor Alpine interactivo:\ndocker run -it --name my-alpine alpine /bin/sh\nInstalar el paquete curl desde el contenedor Alpine:\napk add --no-cache curl\nCrear una nueva imagen “alpine-curl”:\ndocker commit my-alpine alpine-curl",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios1.html",
    "href": "unidades/ejercicios1.html",
    "title": "Actividad Práctica",
    "section": "",
    "text": "Objetivo\nEl objetivo de esta actividad es practicar el uso de volúmenes en Docker para persistir datos entre contenedores.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios1.html#instrucciones",
    "href": "unidades/ejercicios1.html#instrucciones",
    "title": "Actividad Práctica",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea un nuevo volumen llamado “mydata” utilizando el comando docker volume create.\nInicia un contenedor de la imagen “nginx” y vincula el volumen “mydata” al directorio “/usr/share/nginx/html” dentro del contenedor utilizando el comando docker run.\nCrea un archivo HTML dentro del volumen “mydata” con el mensaje “Hola, este es un archivo HTML persistente”. Puedes hacer esto iniciando un contenedor temporal que tenga acceso al volumen y utilizando un editor de texto para crear el archivo.\nInicia otro contenedor de la imagen “nginx” y vincula el mismo volumen “mydata” al directorio “/usr/share/nginx/html” dentro de este segundo contenedor. Verifica que puedes ver el archivo HTML que creaste en el paso 3.\n\nRecuerda que puedes consultar la documentación de Docker si necesitas ayuda con los comandos.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios1.html#entregables",
    "href": "unidades/ejercicios1.html#entregables",
    "title": "Actividad Práctica",
    "section": "Entregables:",
    "text": "Entregables:\n\nDocumento explicando los comandos utilizados.\nCapturas de pantalla que demuestren la persistencia de datos entre contenedores.\n\n\n\nResolución de la Actividad Práctica\n\nCrear un nuevo volumen:\ndocker volume create mydata\nIniciar el primer contenedor Nginx con el volumen:\ndocker run -d -p 8080:80 --name nginx-1 -v mydata:/usr/share/nginx/html nginx\nCrear un archivo HTML dentro del volumen:\ndocker exec -it nginx-1 sh -c \"echo 'Hola, este es un archivo HTML persistente' &gt; /usr/share/nginx/html/index.html\"\nIniciar el segundo contenedor Nginx con el mismo volumen:\ndocker run -d -p 8081:80 --name nginx-2 -v mydata:/usr/share/nginx/html nginx\nVerificar la persistencia del archivo HTML:\n\nAcceder a http://localhost:8080 en el navegador.\nAcceder a http://localhost:8081 en el navegador.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios1.html#rubrica-de-evaluación",
    "href": "unidades/ejercicios1.html#rubrica-de-evaluación",
    "title": "Actividad Práctica",
    "section": "Rubrica de Evaluación:",
    "text": "Rubrica de Evaluación:\n\nCorrecta creación y vinculación de volúmenes: 6 puntos\nCreación y persistencia de archivos en el volumen: 8 puntos\nVerificación exitosa de la persistencia entre contenedores: 6 puntos",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios2.html",
    "href": "unidades/ejercicios2.html",
    "title": "Actividad Práctica",
    "section": "",
    "text": "Objetivo\nEl objetivo de esta actividad es practicar la creación de imágenes personalizadas utilizando Dockerfile y la orquestación de servicios con Docker Compose.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios2.html#instrucciones",
    "href": "unidades/ejercicios2.html#instrucciones",
    "title": "Actividad Práctica",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCrea un Dockerfile para una aplicación Python simple que imprima “Hola, Docker” al ejecutarse. Asegúrate de que tu aplicación esté configurada para escuchar en el puerto 5000.\nConstruye la imagen a partir del Dockerfile utilizando el comando docker build.\nCrea un archivo docker-compose.yml. Dentro de este archivo, define un servicio que utilice la imagen que acabas de crear. Asegúrate de mapear el puerto 5000 del host al puerto 5000 del contenedor.\nInicia el servicio con Docker Compose utilizando el comando docker-compose up.\nAccede a la aplicación en http://localhost:5000 y verifica que imprime “Hola, Docker”.\n\nRecuerda que puedes consultar la documentación de Docker y Docker Compose si necesitas ayuda con los comandos.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios2.html#entregables",
    "href": "unidades/ejercicios2.html#entregables",
    "title": "Actividad Práctica",
    "section": "Entregables:",
    "text": "Entregables:\n\nDockerfile para la aplicación Python.\nArchivo Docker Compose.\nDocumento explicando los comandos utilizados.\nCapturas de pantalla que demuestren el acceso a la aplicación.\n\n\n\nResolución de la Actividad Práctica\n\nDockerfile para la aplicación Python:\nFROM python:3.9\nCMD [\"python\", \"-c\", \"print('Hola, Docker')\"]\nConstruir la imagen:\ndocker build -t my-python-app .\nArchivo Docker Compose (docker-compose.yml):\nversion: '3'\nservices:\n  myapp:\n    image: my-python-app\n    ports:\n      - \"5000:5000\"\nIniciar el servicio con Docker Compose:\ndocker-compose up -d\nVerificar el acceso a la aplicación:\nAcceder a http://localhost:5000 en el navegador.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios2.html#rubrica-de-evaluación",
    "href": "unidades/ejercicios2.html#rubrica-de-evaluación",
    "title": "Actividad Práctica",
    "section": "Rubrica de Evaluación:",
    "text": "Rubrica de Evaluación:\n\nCorrecta creación del Dockerfile: 6 puntos\nImagen construida correctamente: 4 puntos\nConfiguración adecuada en Docker Compose: 6 puntos\nAcceso exitoso a la aplicación: 4 puntos",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios3.html",
    "href": "unidades/ejercicios3.html",
    "title": "Actividad Práctica",
    "section": "",
    "text": "Objetivo\nEl objetivo de esta actividad es aplicar buenas prácticas y medidas de seguridad al trabajar con Docker.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios3.html#instrucciones",
    "href": "unidades/ejercicios3.html#instrucciones",
    "title": "Actividad Práctica",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nUtiliza la herramienta Snyk para escanear la imagen “alpine:latest” en busca de vulnerabilidades.\nImplementa una política de etiquetado para las imágenes Docker que siga las mejores prácticas. Por ejemplo, podrías incluir información sobre la versión del software y la fecha de creación en las etiquetas.\nUtiliza la herramienta “docker-compose lint” para verificar la validez de tu archivo Docker Compose. Asegúrate de corregir cualquier advertencia o error que encuentres.\nImplementa una red de contenedores utilizando el comando docker network create. Asegúrate de que solo los contenedores que necesitan comunicarse entre sí tengan acceso a esta red.\nCrea un archivo “.dockerignore” para excluir archivos y directorios innecesarios en la construcción de imágenes Docker. Esto puede ayudar a reducir el tamaño de tus imágenes y a evitar la inclusión accidental de información sensible.\n\nRecuerda que puedes consultar la documentación de Docker y Snyk si necesitas ayuda con los comandos.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios3.html#entregables",
    "href": "unidades/ejercicios3.html#entregables",
    "title": "Actividad Práctica",
    "section": "Entregables:",
    "text": "Entregables:\n\nCapturas de pantalla del escaneo de vulnerabilidades.\nPolítica de etiquetado para imágenes Docker.\nResultado de la verificación del archivo Docker Compose.\nDocumento explicando la implementación de la red de contenedores.\nArchivo “.dockerignore”.\n\n\n\nResolución de la Actividad Práctica\n\nEscaneo de vulnerabilidades:\nsnyk container test alpine:latest\nPolítica de etiquetado (ejemplo):\nSe etiquetarán las imágenes con el formato “versión-año-mes-día” (ejemplo: 1.0-20230115).\nVerificación del archivo Docker Compose:\ndocker-compose config\nImplementación de una red de contenedores:\ndocker network create my-network\nArchivo “.dockerignore” (ejemplo):\nnode_modules\n.git\n.env",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios3.html#rubrica-de-evaluación",
    "href": "unidades/ejercicios3.html#rubrica-de-evaluación",
    "title": "Actividad Práctica",
    "section": "Rubrica de Evaluación:",
    "text": "Rubrica de Evaluación:\n\nEscaneo de vulnerabilidades realizado con éxito: 4 puntos\nCorrecta implementación de la política de etiquetado: 4 puntos\nValidación exitosa del archivo Docker Compose: 4 puntos\nImplementación adecuada de la red de contenedores: 4 puntos\nCorrecta configuración del archivo “.dockerignore”: 4 puntos",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Actividad Práctica</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre mí",
    "section": "",
    "text": "¿Quién soy?"
  },
  {
    "objectID": "about.html#quién-soy",
    "href": "about.html#quién-soy",
    "title": "Sobre mí",
    "section": "",
    "text": "Diego Saavedra"
  },
  {
    "objectID": "about.html#formación-académica",
    "href": "about.html#formación-académica",
    "title": "Sobre mí",
    "section": "Formación Académica",
    "text": "Formación Académica\n\nSoy candidato a doctorado en Informática con una sólida formación en esta área y una profunda pasión por el desarrollo avanzado de software e investigación."
  },
  {
    "objectID": "about.html#experiencia-laboral",
    "href": "about.html#experiencia-laboral",
    "title": "Sobre mí",
    "section": "Experiencia Laboral",
    "text": "Experiencia Laboral\n\nMi trayectoria abarca tanto la enseñanza de Ciencias de la Computación como la investigación en áreas fundamentales como Desarrollo de Software e Inteligencia Artificial."
  },
  {
    "objectID": "about.html#habilidades-técnicas",
    "href": "about.html#habilidades-técnicas",
    "title": "Sobre mí",
    "section": "Habilidades Técnicas",
    "text": "Habilidades Técnicas\n\nHe acumulado habilidades técnicas en un amplio espectro de tecnologías y lenguajes de programación, incluyendo:\n\nPython (junto con sus frameworks Django, Flask y Fast API)\nJavaScript (con Express, Next y Astro)\nDesarrollo de aplicaciones móviles en Android y Flutter\nBases de datos relacionales como PostgreSQL, MySQL y MariaDB\nBases de datos no relacionales como MongoDB y Firebase\nArquitecturas de software, incluyendo microservicios y arquitecturas basadas en la nube (Azure, AWS) utilizando Docker y Kubernetes"
  },
  {
    "objectID": "about.html#contacto",
    "href": "about.html#contacto",
    "title": "Sobre mí",
    "section": "Contacto",
    "text": "Contacto\n\nPuedes contactarme a través de LinkedIn o GitHub."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de Diego Saavedra. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio. No está permitido compartir el curso con otros fuera de tu hogar o aula sin el permiso explícito de Diego Saavedra."
  },
  {
    "objectID": "license.html#contacto",
    "href": "license.html#contacto",
    "title": "Licencia",
    "section": "Contacto",
    "text": "Contacto\nSi deseas obtener permiso para usos comerciales o para compartir el curso con otros, por favor contacta a Diego Medardo Saavedra Garcia a través de dsaavedra88@gmail.com."
  }
]