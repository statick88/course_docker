# Servidores Docker

En esta unidad vamos a aprender acerca de los distinto servidores de bases de datos que podemos utilizar en Docker.

Vamos a utilizar el concepto de Dockerfile y Docker Compose para esta actividad

## MySQL

Empezamos con la creación de un archivo llamado `Dockerfile` con el siguiente contenido:

```Dockerfile
# Use the official MySQL image

FROM mysql:8.0.26

# Set the root password

ENV MYSQL_ROOT_PASSWORD=mysecretpassword

# Expose port 3306

EXPOSE 3306

# Start MySQL

CMD ["mysqld"]
```

Para construir la imagen de MySQL, ejecutamos el siguiente comando:

```bash
docker build -t my-mysql .
```

Para ejecutar el contenedor de MySQL, ejecutamos el siguiente comando:

```bash
docker run --name some-mysql -d my-mysql
```

Posiblemente en algunos casos necesitemos utilizar un archivo `docker-compose.yml` para la creación del contenedor, el contenido del archivo sería el siguiente:

```yaml
version: '3.3'

services:
  mysql:
    image: mysql:8.0.26
    environment:
      MYSQL_ROOT_PASSWORD: mysecretpassword
    ports:
      - "3306:3306"
```

Para ejecutar el contenedor de MySQL, ejecutamos el siguiente comando:

```bash
docker-compose up -d
```

Para configurar en un cliente de MySQL, necesitamos concer los siguientes datos:

- Host: localhost
- Port: 330
- User: root
- Password: mysecretpassword

## PostgreSQL


## MongoDB


Otros servidores típicos que vamos a utilizar en el desarrollo de software son:

- Apache
- Nginx
- Tomcat

## Apache

## Nginx

## Node.js

## React

## Angular

## Spring Boot

## Django


<!-- ## Conclusión

En esta unidad hemos aprendido a instalar distintos servidores de bases de datos y servidores web en Docker. En la siguiente unidad, vamos a aprender a crear nuestras propias imágenes de Docker.

---

# Creación de Imágenes Docker

En esta unidad vamos a aprender a crear nuestras propias imágenes de Docker.

## Creación de Imágenes

Para crear una imagen de Docker, necesitamos un archivo Dockerfile. Un archivo Dockerfile es un archivo de texto que contiene una serie de instrucciones que Docker utilizará para crear una imagen. Por ejemplo, el siguiente archivo Dockerfile crea una imagen de Apache:

```Dockerfile
# Use the official Apache image

FROM httpd:2.4.48

# Copy the configuration file

COPY ./httpd.conf /usr/local/apache2/conf/httpd.conf

# Expose port 80

EXPOSE 80

# Start Apache

CMD ["httpd-foreground"]
```

Para crear una imagen de Docker a partir de un archivo Dockerfile, ejecutamos el siguiente comando:

```bash
docker build -t my-apache .
```

## Publicación de Imágenes

Para publicar una imagen de Docker en Docker Hub, necesitamos una cuenta en Docker Hub. Una vez que tenemos una cuenta en Docker Hub, podemos publicar una imagen de Docker utilizando el siguiente comando:

```bash
docker login
docker tag my-apache myusername/my-apache
docker push myusername/my-apache
```

## Descarga de Imágenes

Para descargar una imagen de Docker desde Docker Hub, ejecutamos el siguiente comando:

```bash
docker pull myusername/my-apache
```

## Conclusión

En esta unidad hemos aprendido a crear nuestras propias imágenes de Docker y a publicarlas en Docker Hub. En la siguiente unidad, vamos a aprender a trabajar con contenedores en Docker. -->
